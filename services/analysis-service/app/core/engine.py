"""Analysis engine integrating relations, strength, structure, and luck."""

from __future__ import annotations

from dataclasses import dataclass, field
from datetime import datetime

from ..models import (
    AnalysisRequest,
    AnalysisResponse,
    LuckDirectionResult,
    LuckResult,
    RecommendationResult,
    RelationsExtras,
    RelationsResult,
    ShenshaResult,
    StrengthDetails,
    StrengthResult,
    StructureResultModel,
    TenGodsResult,
)
from .luck import LuckCalculator, LuckContext, ShenshaCatalog
from .recommendation import RecommendationGuard
from .relations import RelationContext, RelationTransformer
from .school import SchoolProfileManager
from .structure import StructureContext, StructureDetector

# TODO: Fix cross-service import - hyphens in module names not supported
# from services.pillars-service.app.core.strength import StrengthEvaluator


class StrengthEvaluator:
    """Temporary placeholder for StrengthEvaluator to fix CI."""

    pass


@dataclass(slots=True)
class AnalysisEngine:
    """Applies KR_classic v1.4 ten gods/relations/strength rules."""

    relation_transformer: RelationTransformer = field(default_factory=RelationTransformer.from_file)
    strength_evaluator: StrengthEvaluator = field(default_factory=StrengthEvaluator.from_files)
    structure_detector: StructureDetector = field(default_factory=StructureDetector.from_file)
    luck_calculator: LuckCalculator = field(default_factory=LuckCalculator)
    shensha_catalog: ShenshaCatalog = field(default_factory=ShenshaCatalog)
    recommendation_guard: RecommendationGuard = field(default_factory=RecommendationGuard.from_file)
    school_profiles: SchoolProfileManager = field(default_factory=SchoolProfileManager.load)

    def analyze(self, request: AnalysisRequest) -> AnalysisResponse:
        """Return enriched analysis output."""
        # Placeholder ten gods mapping; real implementation will consume pillars.
        ten_gods = TenGodsResult(
            summary={
                "year": "偏印",
                "month": "正財",
                "day": "日主",
                "hour": "食神",
            }
        )

        branches = ["亥", "卯", "未"]
        month_branch = "未"
        relation_ctx = RelationContext(branches=branches, month_branch=month_branch)
        relation_result = self.relation_transformer.evaluate(relation_ctx)
        relations = RelationsResult(
            he6=[["子", "丑"]],
            sanhe=[["申", "子", "辰"]],
            chong=[["子", "午"]],
            hai=[["子", "未"]],
            po=[["子", "卯"]],
            xing=[["寅", "巳", "申"]],
        )
        relation_extras = RelationsExtras(
            priority_hit=relation_result.priority_hit,
            transform_to=relation_result.transform_to,
            boosts=relation_result.boosts,
            extras=relation_result.extras,
        )

        # Strength scoring placeholder.
        branch_roots = ["丑", "未"]
        visible_counts = {"bi_jie": 1}
        combos = {"sanhe": 1}
        strength_details = self.strength_evaluator.evaluate(
            month_branch=month_branch,
            day_pillar="丁丑",
            branch_roots=branch_roots,
            visible_counts=visible_counts,
            combos=combos,
            wealth_hits=[{"slot": "month", "level": "sub"}, {"slot": "day", "level": "sub"}],
            month_stem_exposed=True,
            wealth_root_score=5,
            seal_root_score=3,
            wealth_month_state="旺",
            wealth_seal_branch_conflict=False,
        )
        strength = StrengthResult(
            level=strength_details["grade"],
            basis={
                "season": "得令",
                "roots": "有本氣",
                "seal": "天干1見",
                "peer": "同氣",
            },
        )

        structure_scores = {"정관": 15, "정재": 8, "편재": 5}
        structure_result = self.structure_detector.evaluate(
            StructureContext(scores=structure_scores)
        )
        structure_model = StructureResultModel(
            primary=structure_result.primary,
            confidence=structure_result.confidence,
            candidates=structure_result.candidates,
        )

        luck_ctx = LuckContext(local_dt=datetime(1992, 7, 15, 23, 40), timezone="Asia/Seoul")
        luck_calc = self.luck_calculator.compute_start_age(luck_ctx)
        luck_direction = self.luck_calculator.luck_direction(luck_ctx)
        shensha = self.shensha_catalog.list_enabled()

        trace = {
            "rule_id": "KR_classic_v1.4",
            "notes": "generated by placeholder engine",
        }

        recommendation = self.recommendation_guard.decide(
            structure_primary=structure_result.primary
        )
        school_profile = self.school_profiles.get_profile()
        return AnalysisResponse(
            ten_gods=ten_gods,
            relations=relations,
            relation_extras=relation_extras,
            strength=strength,
            strength_details=StrengthDetails(**strength_details),
            structure=structure_model,
            luck=LuckResult(**luck_calc),
            luck_direction=LuckDirectionResult(**luck_direction),
            shensha=ShenshaResult(**shensha),
            school_profile=school_profile,
            recommendation=RecommendationResult(**recommendation),
            trace=trace,
        )
