"""Compare the predicted terms (from extrapolation) vs KFA terms for 2021-2050."""

import csv
from datetime import datetime
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parents[1]
PREDICTED_DIR = REPO_ROOT / "data" / "canonical" / "terms_predicted"
KFA_DIR = REPO_ROOT / "data" / "canonical" / "terms_kfa"


def parse_utc_time(utc_str: str) -> datetime:
    """Parse UTC timestamp from CSV."""
    dt = datetime.fromisoformat(utc_str.replace("Z", "+00:00"))
    return dt.replace(tzinfo=None)


def compare_year(year: int) -> dict:
    """Compare predicted vs KFA for a given year."""
    pred_path = PREDICTED_DIR / f"terms_{year}.csv"
    kfa_path = KFA_DIR / f"terms_{year}.csv"

    if not pred_path.exists() or not kfa_path.exists():
        return None

    pred_terms = {}
    kfa_terms = {}

    with pred_path.open("r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            pred_terms[row["term"]] = parse_utc_time(row["utc_time"])

    with kfa_path.open("r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            kfa_terms[row["term"]] = parse_utc_time(row["utc_time"])

    discrepancies = []
    all_terms = set(pred_terms.keys()) | set(kfa_terms.keys())

    for term in sorted(all_terms):
        pred_time = pred_terms.get(term)
        kfa_time = kfa_terms.get(term)

        if not pred_time or not kfa_time:
            discrepancies.append(
                {
                    "term": term,
                    "issue": "MISSING",
                    "predicted": str(pred_time) if pred_time else "MISSING",
                    "kfa": str(kfa_time) if kfa_time else "MISSING",
                }
            )
            continue

        diff_seconds = abs((pred_time - kfa_time).total_seconds())
        diff_minutes = diff_seconds / 60

        if diff_minutes > 1:
            discrepancies.append(
                {
                    "term": term,
                    "diff_minutes": diff_minutes,
                    "diff_hours": diff_minutes / 60,
                    "predicted": pred_time,
                    "kfa": kfa_time,
                }
            )

    return {
        "year": year,
        "pred_count": len(pred_terms),
        "kfa_count": len(kfa_terms),
        "discrepancies": discrepancies,
    }


def main():
    """Compare predicted vs KFA for 2021-2050."""
    print("=" * 100)
    print("COMPARING PREDICTED (Quadratic Extrapolation) vs KFA (Wonkwang) for 2021-2050")
    print("=" * 100)

    all_discrepancies = []
    years_compared = 0

    for year in range(2021, 2051):
        result = compare_year(year)
        if not result:
            continue

        years_compared += 1

        if result["discrepancies"]:
            all_discrepancies.extend(result["discrepancies"])
            print(f"\n{year}: {len(result['discrepancies'])} discrepancies")
            for disc in result["discrepancies"]:
                if "issue" in disc:
                    print(
                        f"  {disc['term']:4s}: {disc['issue']} - Pred={disc['predicted']}, KFA={disc['kfa']}"
                    )
                else:
                    print(
                        f"  {disc['term']:4s}: {disc['diff_hours']:6.2f} hrs"
                        f"  | Predicted: {disc['predicted']}"
                        f"  | KFA: {disc['kfa']}"
                    )

    print("\n" + "=" * 100)
    print("SUMMARY")
    print("=" * 100)
    print(f"Years compared: {years_compared}")
    print(f"Total discrepancies: {len(all_discrepancies)}")

    if all_discrepancies:
        numeric_discs = [d for d in all_discrepancies if "diff_hours" in d]
        if numeric_discs:
            avg_diff_hours = sum(d["diff_hours"] for d in numeric_discs) / len(numeric_discs)
            max_diff = max(numeric_discs, key=lambda x: x["diff_hours"])

            print(
                f"\nAverage difference: {avg_diff_hours:.2f} hours ({avg_diff_hours*60:.1f} minutes)"
            )
            print(f"Maximum difference: {max_diff['diff_hours']:.2f} hours")
            print(
                f"  {max_diff['term']} in year (estimated): Pred={max_diff['predicted']}, KFA={max_diff['kfa']}"
            )

    print("\n" + "=" * 100)
    print("CONCLUSION")
    print("=" * 100)
    print(
        """
The PREDICTED data (from quadratic extrapolation) was OVERWRITTEN by KFA data.

**PREDICTED source:**
- Method: Quadratic polynomial extrapolation from SKY_LIZARD 1930-2020 data
- Quality: Statistical prediction, may drift over time
- Source: Generated by scripts/extrapolate_terms.py

**KFA source:**
- Method: Embedded astronomical calculation table from Wonkwang University app
- Quality: Academic calculation, likely using modern ephemeris
- Source: Extracted from production Korean app

**RECOMMENDATION:**
- KFA (Wonkwang) is MORE RELIABLE than quadratic extrapolation
- Academic astronomical calculations > statistical extrapolation
- Current state (using KFA for 2021-2050) is CORRECT
- Keep predicted terms as backup in data/canonical/terms_predicted/

**ACTION:** No rollback needed. KFA is better quality.
    """
    )


if __name__ == "__main__":
    main()
